{"version":3,"sources":["../lib/PostController.js"],"names":[],"mappings":"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","file":"PostController.js","sourcesContent":["'use strict';\nimport KeystoneHelper from './Keystone/KeystoneHelper';\nimport Promise from 'bluebird';\nimport Binder from './Binder';\nimport Renderer from './Renderer';\nimport _ from 'lodash';\n\n/**\n * Controller for the BlogPost object\n */\nclass PostController extends Binder {\n\n  /**\n   * Constructor for the PostController object\n   * @param  {Boolean} render Whether the keystone-blog module should render jade templates.\n   *                          If true, a rendered template is returned.\n   *                          If false, index methods will return a list of Post instances and\n   *                          show methods will return Post instances.\n   * @param  {Integer} perPage The number of blog posts to show on a single index page. Defaults to 10.\n   * @param  {Integer} maxPages The number of pages to show in the pagination navigation. Defaults to 5.\n   * @param  {String} dateFormat The format to show the blog date. Defaults to \"llll\". See http://momentjs.com/#format-dates\n   */\n  constructor(render, perPage, maxPages, dateFormat){\n    super();\n    this.render = render || true;\n    this.perPage = perPage || 10;\n    this.maxPages = maxPages || 5;\n    this.dateFormat = dateFormat || \"llll\";\n    this._bind(['request', '_index', '_show', '_renderIndex', '_renderShow', '_buildIndexQuery']);\n  }\n\n  /**\n   * A request is made. This is called as a middleware function in the parent application's routes.\n   * If a post slug is attached to the request parameters and is not \"popular\", the show function will be called next,\n   * otherwise the index function will.\n   * @param  {HttpRequest}   req\n   * @param  {HttpResponse}  res\n   * @param  {Function}      next\n   */\n  request(req, res, next) {\n    if(req.params.post) {\n      this._show(req, res, next);\n    } else {\n      this._index(req, res, next);\n    }\n  }\n\n  // TODO Sort similarly to reddit's hot sort algorithm so createdAt date is factored into the sorting\n  /**\n   * Get a list of most popular posts\n   * @param  {HttpRequest}  req  [description]\n   * @param  {HttpResponse} res  [description]\n   * @return {List[Post]}   The posts, sorted by popularity\n   */\n  popularPosts(req, res, limit){\n    var render = this.render;\n    var session = req.session;\n    var query = KeystoneHelper.getKeystone()\n      .list('BlogPost').model\n      .find()\n      .populate('tags')\n      .populate('author')\n      .sort('-views');\n    if(typeof limit !== 'undefined') {\n      query.limit(limit);\n    }\n    return query.exec(function(err, result) {});\n  }\n\n  _popular(req, res, next) {\n    var page = req.query.page || 1;\n    var perPage = this.perPage;\n    var maxPages = this.maxPages;\n\n    this.popularPosts(req, res)\n      .then((result) => {\n        req.renderedTemplate = this._renderIndex(result);\n        // Allow the next in the chain\n        next();\n      });\n  }\n\n  /**\n   * Get the index of posts. If render is true, a rendered jade template will be returned.\n   * Else, a list of Posts will be.\n   * Also, if the post slug has a value equivalent to \"popular\", the index will be sorted on popularity\n   * @param  {HttpRequest}   req\n   * @param  {HttpResponse}  res\n   * @param  {Function}      next\n   * @return {JadeTemplate or List[Post]} The configured return format for an index of posts\n   */\n  _index(req, res, next){\n    var render = this.render;\n    var page = req.query.page || 1;\n    var perPage = this.perPage;\n    var maxPages = this.maxPages;\n\n    // If we are not filtering on tag\n    var promise = Promise.resolve(false);\n    // If we are filtering on tag\n    if(req.query.tag) {\n      var tag;\n      var tagFilter = req.query.tag;\n      promise = KeystoneHelper.getKeystone()\n        .list('Tag').model\n        .findOne({'slug': tagFilter})\n        .exec(function(err, result) {\n          tag = result;\n        });\n    }\n    promise.then((result) => {\n      var query;\n      // If we are not filtering on tag\n      if(result === false) {\n        // If we are sorting on popularity\n        query = this._buildIndexQuery(page, req.query.sortBy);\n      } else {\n        // If we are filtering on tag\n        query = this._buildIndexQuery(page, req.query.sortBy, result);\n      }\n      return Promise.promisify(query.exec);\n    }).then((result) => {\n      result()\n        .then((posts) => {\n          // Render a jade template and return it\n          if(render){\n            req.renderedTemplate = this._renderIndex(posts);\n          } else {\n            // Return the result set of posts\n            req.posts = posts;\n          }\n          // Allow the next in the chain\n          next();\n        });\n    });\n  }\n\n  /**\n   * Get a posts. If render is true, a rendered jade template will be returned.\n   * Else, a Post instance will be.\n   * @param  {HttpRequest}   req\n   * @param  {HttpResponse}  res\n   * @param  {Function}      next\n   * @return {JadeTemplate or Post} The configured return format for a post\n   */\n  _show(req, res, next){\n    var render = this.render;\n    var session = req.session;\n    if (typeof session.postViews == 'undefined') {\n      session.postViews = [];\n    }\n    Promise.resolve(KeystoneHelper.getKeystone()\n      .list('BlogPost').model\n      .findOne({ 'slug' : req.params.post })\n      .populate('tags')\n      .populate('author')\n      .exec())\n      .then((post) => {\n        // Track pageviews of this blog post if the session has not already done so\n        if(session.postViews.indexOf(post.slug) == -1) {\n          KeystoneHelper.getKeystone()\n            .list('BlogPost').model\n            .update({slug: post.slug}, {\n              views: post.views + 1\n            }, function(err, affected, resp){});\n          session.postViews.push(post.slug);\n        }\n\n        if(render){\n          req.renderedTemplate = this._renderShow(post);\n        } else {\n          req.post = post;\n        }\n        next();\n      });\n  }\n\n  /**\n   * Render the jade template for post index\n   * @param  {List[Post]} posts The post index\n   * @return {Rendered jade tmeplate} The index partial\n   */\n  _renderIndex(posts){\n    var dateFormat = this.dateFormat;\n    var renderer = new Renderer();\n    return renderer.render(posts, '/../templates/layouts/index.jade', dateFormat);\n  }\n\n  /**\n   * Render the jade template for post show\n   * @param  {List[Post]} posts The post\n   * @return {Rendered jade tmeplate} The show partial\n   */\n  _renderShow(post){\n    var dateFormat = this.dateFormat;\n    var renderer = new Renderer();\n    return renderer.render(post, '/../templates/layouts/show.jade', dateFormat);\n  }\n\n  _buildIndexQuery(page, sortBy, filterBy){\n    var query = KeystoneHelper.getKeystone()\n      .list('BlogPost')\n      .paginate({\n          page: page,\n          perPage: perPage,\n          maxPages: maxPages\n      })\n      .populate('tags')\n      .populate('author');\n\n    var perPage = this.perPage;\n    var maxPages = this.maxPages;\n\n    if(sortBy == null) {\n      query = query.sort('-createdAt');\n    } else if(sortBy == 'popularity') {\n      query = query.sort('-views');\n    } else {\n      query = query.sort(sortBy);\n    }\n\n    if(filterBy != null) {\n      query = query.where('tags').in([result])\n    }\n\n    return query;\n  }\n\n}\n\nmodule.exports = PostController;\n"]}